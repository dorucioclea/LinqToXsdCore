using System.Collections.Generic;
using System.IO;
using System.Text;

namespace Xml.Schema.Linq.CodeGen
{
    public static class PragmaHelper
    {
        /// <summary>
        /// HACK: CodeDom doesn't allow us to add #pragmas.
        /// In &lt;auto-generated&gt; code, CS mandates a "#nullable enable" pragma.
        /// So we add the pragma inside the generated text directly
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pragma"></param>
        public static void InsertFilePragma(this StringWriter writer, string pragma)
        {
            var builder = writer.GetStringBuilder();
            // Insert the pragma on the first blank line, which will be just after the <auto-generated> comment.            
            int blankIndex = IndexOfBlankLine(builder);
            builder.Insert(blankIndex, pragma + "\r\n");
        }

        public static void InsertFilePragma(this IEnumerable<(string, StringWriter)> writers, string pragma)
        {
            foreach (var writerPair in writers) {
                writerPair.Item2.InsertFilePragma(pragma);
            }
        }

        private static int IndexOfBlankLine(StringBuilder builder)
        {
            // We look for two chars \n[\r\n], so the stop condition is one less than actual length
            for (int i = 0; i < builder.Length - 1; i++) {
                if (builder[i] == '\n') {
                    ++i; // Safe because of the `Length - 1` stop condition
                    if (builder[i] == '\r' || builder[i] == '\n') {
                        return i;
                    }
                }
            }

            return 0;
        }
    }
}